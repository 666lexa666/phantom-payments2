import express from "express";
import { createClient } from "@supabase/supabase-js";

const router = express.Router({ mergeParams: true });

// üîë Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

router.get("/", async (req, res) => {
  try {
    const opId = req.params.opId;
    let apiKey = req.headers["x-api-key"];
    let apiLogin = req.headers["x-api-login"];

    if (!apiKey && !apiLogin) {
      return res.status(400).json({ error: "Missing API credentials" });
    }

    if (!opId) {
      return res.status(400).json({ error: "Missing opId" });
    }

    // ‚öôÔ∏è –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ç–æ–ª—å–∫–æ API-–∫–ª—é—á ‚Äî –∏—â–µ–º –ª–æ–≥–∏–Ω –ø–æ –Ω–µ–º—É
    if (!apiLogin && apiKey) {
      const { data: clientByKey, error: keyErr } = await supabase
        .from("api_clients")
        .select("api_login")
        .eq("api_key", apiKey)
        .maybeSingle();

      if (keyErr) throw keyErr;
      if (!clientByKey) {
        return res.status(401).json({ error: "Invalid API key" });
      }

      apiLogin = clientByKey.api_login;
    }

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    const { data: client, error: clientErr } = await supabase
      .from("api_clients")
      .select("api_login")
      .eq("api_login", apiLogin)
      .eq("api_key", apiKey)
      .maybeSingle();

    if (clientErr) throw clientErr;
    if (!client) {
      return res.status(403).json({ error: "Forbidden: invalid API credentials" });
    }

    // üîπ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É purchases2
    const tableName = "purchases2";

    // üîç –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ opId
    const { data: purchase, error: purchaseErr } = await supabase
      .from(tableName)
      .select("status")
      .eq("api_login", apiLogin)
      .eq("id", opId)
      .maybeSingle();

    if (purchaseErr) throw purchaseErr;
    if (!purchase) {
      return res.status(404).json({ error: "Purchase not found" });
    }

    // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    let operation_status_code = 1; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî "–æ–∂–∏–¥–∞–Ω–∏–µ"

    if (purchase.status?.toLowerCase() === "success") {
      operation_status_code = 5; // —É—Å–ø–µ—à–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    } else if (purchase.status?.toLowerCase() === "refund") {
      operation_status_code = 3; // –≤–æ–∑–≤—Ä–∞—Ç
    }

    return res.status(200).json({
      results: { operation_status_code },
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", err);
    return res.status(500).json({ error: "Internal server error" });
  }
});

export default router;
